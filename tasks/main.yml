---
# Setup a devspace

- name: add user {{ devspace_user }} to docker group
  become: yes
  user:
    name: "{{ devspace_user }}"
    comment: "Devspace maintainer"
    uid: "{{ devspace_user_id }}"
    groups: docker
    append: yes

- name: ensures /home/{{ devspace_user }}/.ssh dir exists
  become: yes
  become_user: "{{ devspace_user }}"
  file:
    path: "/home/{{ devspace_user }}/.ssh"
    state: "directory"
    owner: "{{ devspace_user }}"
    group: "{{ devspace_user }}"
    mode: 0700

- name: allow {{ devspace_user }} to ssh directly
  become: yes
  copy:
    remote_src: yes
    src: "{{ ansible_env.HOME }}/.ssh/authorized_keys"
    dest: "/home/{{ devspace_user }}/.ssh/authorized_keys"
    owner: "{{ devspace_user }}"
    group: "{{ devspace_user }}"

- name: install python tools
  become: yes
  yum:
    name: "{{ item }}"
    state: present
  with_items:
    - python-devel
    - python-pip

- name: install python packages
  become: yes
  pip:
    name: "{{ item }}"
    #extra_args: "--upgrade"
    state: latest
  with_items:
    - pip
    - passlib
    - pyyaml
    - docker-compose

- name: clone devspace
  become: yes
  become_user: "{{ devspace_user }}"
  git:
    repo: "{{ devspace_git_repo }}"
    dest: "{{ devspace_home }}"
    update: "{{ devspace_git_update }}"
    force: "{{ devspace_git_force }}"
    refspec: "+refs/pull/*:refs/heads/*"
    version: "{{ devspace_git_repo_version }}"
  notify: restart devspace
  register: gitstatus

# config
- name: ensures .ssh dir exists
  become: yes
  become_user: "{{ devspace_user }}"
  file:
    path: "{{ devspace_home }}/slave/.ssh"
    state: directory
    owner: "{{ devspace_user }}"
    group: "{{ devspace_user }}"
    mode: 0700

- name: copy configuration files
  become: yes
  become_user: "{{ devspace_user }}"
  copy:
     src: "{{ configuration_dir_path }}/{{ item.srcfile }}"
     dest: "{{ devspace_home }}/slave/{{ item.dest }}"
     owner: "{{ devspace_user }}"
     group: "{{ devspace_user }}"
     mode: 0700
  with_items:
    - { srcfile: ".ssh/config", dest: ".ssh/config" }
    - { srcfile: ".ssh/id_gh_rsa", dest: ".ssh/id_gh_rsa" }
    - { srcfile: ".ssh/id_gh_rsa.pub", dest: ".ssh/id_gh_rsa.pub" }
    - { srcfile: ".gitconfig", dest: ".gitconfig" }

- name: known_hosts
  become: yes
  become_user: "{{ devspace_user }}"
  shell: ssh-keyscan github.com >> {{ devspace_home }}/slave/.ssh/known_hosts
- name: chmod known_hosts
  become: yes
  become_user: "{{ devspace_user }}"
  file:
    path: "{{ devspace_home }}/slave/.ssh/known_hosts"
    mode: 0700

- name: change USER_ID
  become: yes
  become_user: "{{ devspace_user }}"
  replace:
    dest: "{{ devspace_home }}/{{ item }}"
    regexp: '^ARG USER_ID=1000'
    replace: 'ARG USER_ID={{ devspace_user_id }}' # how to find out UID?
  with_items:
    - nginx/Dockerfile
    - slave/Dockerfile
    - server/Dockerfile
    - web/Dockerfile

- name: set basic auth password for nginx proxy
  become: yes
  lineinfile:
    dest: "{{ devspace_home }}/jenkins/conf.d/jenkins.conf"
    backup: yes
    regexp: "^        auth_basic \"Restricted\";"
    line: "        auth_basic \"Restricted\";"
    insertafter: "    location / {"
    state: present
  when: devspace_jenkins_nginx_username|length>0 and devspace_jenkins_nginx_password|length>0

- name: set basic auth password for nginx proxy
  become: yes
  lineinfile:
    dest: "{{ devspace_home }}/jenkins/conf.d/jenkins.conf"
    backup: yes
    regexp: "^        auth_basic_user_file /etc/nginx/conf.d/passwdfile;"
    line: "        auth_basic_user_file /etc/nginx/conf.d/passwdfile;"
    insertafter: "        auth_basic \"Restricted\";"
    state: present
  when: devspace_jenkins_nginx_username|length>0 and devspace_jenkins_nginx_password|length>0

- name: set nginx proxy password
  become: yes
  become_user: "{{ devspace_user }}"
  htpasswd:
    path: "{{ devspace_home }}/jenkins/conf.d/passwdfile"
    name: "{{ devspace_jenkins_nginx_username }}"
    password: "{{ devspace_jenkins_nginx_password }}"
  when: devspace_jenkins_nginx_username|length>0 and devspace_jenkins_nginx_password|length>0

- name: ssl cert for jenkins
  become: yes
  become_user: "{{ devspace_user }}"
  command: "{{ devspace_home }}/sslcert {{ devspace_home }}/jenkins/sslcert {{ devspace_openstack_ip }}"
  args:
    chdir: "{{ devspace_home }}"
    creates: "{{ devspace_home }}/jenkins/sslcert"

- name: ssl cert for nginx
  become: yes
  become_user: "{{ devspace_user }}"
  command: "{{ devspace_home }}/sslcert {{ devspace_home }}/nginx/sslcert {{ devspace_openstack_ip }}"
  args:
    chdir: "{{ devspace_home }}"
    creates: "{{ devspace_home }}/nginx/sslcert"

- name: find github user
  set_fact:
    git_user: "{{ item.replace('\t', '').split('=')[1] }}"
  when: "'user=' in item.replace(' ', '')"
  with_lines: "cat {{ configuration_dir_path }}/.gitconfig"

- name: rename to {{ devspace_omero_branch }} for {{ git_user }}...
  become: yes
  become_user: "{{ devspace_user }}"
  command: "{{ devspace_home }}/rename.py {{ devspace_omero_branch }} --user {{ git_user }}"
  args:
    chdir: "{{ devspace_home }}"

- name: fix jenkinsUrl
  become: yes
  become_user: "{{ devspace_user }}"
  replace:
    dest: "{{ devspace_home }}/home/{{ item }}"
    regexp: '^(.*)<jenkinsUrl>(.*)</jenkinsUrl>'
    replace: '\1<jenkinsUrl>https://{{ devspace_openstack_ip }}:8443</jenkinsUrl>'
  with_items:
    - jenkins.model.JenkinsLocationConfiguration.xml
  when: devspace_openstack_ip|length>0

# end of config
